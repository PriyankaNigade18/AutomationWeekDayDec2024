Selenium WebDriver
======================
Selenium WebDriver is an API for WebUi automation
WebDriver is an Interface

=======================
Selenium WebDriver setup
=========================
1.Using java project
2.Using maven Project

1.Using java 
===============
1.Create new java project
2.Download selenium executable JAR from selenium.dev
3.Add jar into project
	right click on project--->build path-->configure build path--->library
	----classpath--->add external jar
	
4. setup ready

2.Using Maven
===================
Maven is project/Build management tool
Maven has POM.xml file
POM.xml is called configuration file for project
POM stands for Project object model
Under POM we will Selenium  dependency
dependency is executable library
-------------------------------------------------------
<project>

<dependencies>
<dependency>selenium 4</dependency>
</dependencies>



</project>

-----------------------------------------------------------
Maven Project has two types of repository
-----------------------------------------------
1.Local repo
-------------
c/user/m2 folder

2.Central/Remote repo
------------------------
mvnrepository.com

========================================================
WebDriver commands
=======================
1.Browser commands
==========================
1.get(Url): open application
2.getTitle: get the title  of application
3.getCurrentUrl(): get the current url of the application
4.getPageSource(): get the page source
Multiple Window Handling
----------------------------
5.getWindowHandle(): Current active window
6.getWindowHandles(): handle multiple open windows by selenium

7.close(): close current browser window
8.quit(): close all open windows by selenium

==========================================================
2.Navigation Commands
================================
Selenium support Navigation interface

1.to(url):Navigate to new URL/application
----------------
driver.navigate().to(url)

2.back()
-------------
driver.navigate().back()

3.forward()
------------------
driver.navigate().forward()

4.refresh()
---------------
driver.navigate().refresh()


3.WebElement commands
==============================

What is WebElement?
========================
Any GUI Element is called WebElement, In technocal word
WebElement is Selenium Interface for interacting with WebElements in application

How to automate any WebElement?
====================================
1.Identify WebElement address from application using selenium
2.Perform certain action on those webelement

How to Identify WebElement
=============================
Selenium Support locators to identify WebElement

What is Locator?
==================
Locator is address of element from application

Selenium Support total 8 Locators
=====================================
1.By id (primary Locator)
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic Locators
================
7.By cssSelector
8.By xpath

Selenium 4 supports Relative locators
By is class in Selenium to get the address of element
Using selenium method we can identify that address

1.findElement()
======================
- this method help up to identify one single WebElement
- return type of this method is WebElement Object
- when element not found then this method throws exception as NoSuchElementException

2.findElements()
========================
- this method help us to identify multiple webElements
- return type of this method is List<WebElement>
- When element is not found you will not get any exception
you will get either [] list or using size() get 0.

===============================================================
WebElement validation commands
===================
1.isDisplayed()
2.isEnabled()
3.isSelected()

How to Automate Link/Hyper link
======================================
Selenium provides two locators
<a id="SignIn"  href="login.html">Sign In</a>
							<a>  link text </a>	

1.linkText(full text)
-------------------------
driver.findElement(By.linkText("Sign In")).click();


2.partialLinkText(partial text)
---------------------------------
driver.findElement(By.patialLinkText("In")).click();



Automation using ClassName locators
======================================
class="btn btn-default btn-primary"
	class1	class2      class3

//InvalidSelectorException: Compound class names not permitted
driver.findElement(By.className("btn btn-default btn-primary"));

first identify unique class name and then add it in script

=======================================================
Synchronization Issue in Selenium
=======================================
When there is time mapping issue in between tool and application then it is called synchronization isuue

Selenium handle synchronization using Dynamic Wait
=======================================
1.Implicit
===================
-Implicit wait is global wait applicable for all the elements in script
- we can add as soon driver initialize

driver.manage().timeout().implicitWait(Duration.seconds(10));

10sec will be applicable for every element


2.Explicit
=================
- This wait is applicable for single webelement
- Explicit wait is not global wait
- As per every element validation we can apply wait

Selenium implement explicit wait with 2 classes
-----------------------------------
1.WebDriverWait class
2.FluentWait class
WebDriverWait(C) extends FluentWait(C) implements Wait(I)
========================================================
By tagName
============

total number of  input boxes, images, links.


WebElement Methods
=========================
1.getText()
==============
- any visible text from UI we can capture
- any inner html text also we can capture

2.getAttribute() is deprecated in 4.27 version
----------------------------------------------
this command replace with getDomAttribute() and getDomProperty()

- to get any attribute value we use getDomAttribute()

=======================================================
Dynamic Locators
=====================
1.By cssSelector
2.By xpath

cssSelector
==============

What is Css?
Css is Cascaded style sheet it is a language used to provide style to Html element

CssSelector is locator to locate the element base css properties
CssSelector is faster than xpath as it travels only one direction[parent--->child]
CssSelector does not support method
CssSelector not based on indexing


#input-email

CssSelector patterns
========================
1.tagname with id
----------------------------
Syntax
==========
tagname#id

<input type="text" name="email"  id="input-email" class="form-control">

input#input-email

2.tagname with attaribute
----------------------------
Syntax:
=========
tagname[attribute='value']

<input type="password" name="password" value="" placeholder="Password" >

input[placeholder='Password']

3.tagname with className
--------------------------
Syntax
=======
tagname.className

<input type="submit" value="Login" class="btn btn-primary">

input.btn.btn-primary

4.tagName with id,classname and attribute
-------------------------------------------------
Syntax:
=========
tagname#id.className[attribute='value']
======================================================
<input type="submit" value="Login" class="btn btn-primary">

input.btn.btn-primary[value='Login']

<input type="text" name="email"  id="input-email" class="form-control">

input#input-email.form-control[name='email']

===============================================================================
Xpath
==============

Xpath is path of the element form HTML/XML page

Xpath identify element from DOM(document object model)

Xpath travels in both the direction(forward and backward)

xpath support multiple methods

html Dom
=====================

<html>-----------------root node
<head>
</head>

<body>

<input>
<a>
<div>------------------webElements
<button>
</body>

</html>

=================================================
Xpath Types
====================
1.Absolute xpath(Full xpath)
-------------------------------
 - starts with root node and identify element
 - starts with '/'
 
/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative xpath(partial xpath)
------------------------------------------
- it identify element by directly its ralative property
- starts with '//'

//*[@id="input-email"]

* look for all the tagname
//input[@id="input-email"]

Xpath Syntax
=================
//tagname[@attributename='value']


userName
<input data-v-1f99f73c="" class="oxd-input" name="username" placeholder="Username" autofocus="">

//input[@placeholder='Username']

======================================================
Xpath with Operators
=======================
1.and 
------
Syntax:
==========
//tagname[@attribute1='value' and @attribute2='value']

2.or
----------
Syntax:
==========
//tagname[@attribute1='value' or @attribute2='value']

=====================================================================

Xpath with indexing
=====================
index
------------------
Syntax:
============
(xpath)[index]

position()
------------------
Syntax:
=========
(xpath)[prosition()=index]
========================================================

Xpath Methods
===================
1.text()
==========
<tagname>visible text</tagname>
Syntax:
-------------
//tagname[text()='text']

<h1>Your Account Has Been Created!</h1>

//h1[text()='Your Account Has Been Created!']

<a> Best Sellers</a>
//a[text()='Best Sellers']


2.normalizeSpace()

3.contains()

4.startsWith()


Xpath Axies
======================





Relative locators(selenium4)
=============================




































































	